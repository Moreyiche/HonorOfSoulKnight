#include "HelloWorldScene.h"
#include "SimpleAudioEngine.h"

USING_NS_CC;

Scene* HelloWorld::createScene()
{
    return HelloWorld::create();
}

// Print useful error message instead of segfaulting when files are not there.
static void problemLoading(const char* filename)
{
    printf("Error while loading: %s\n", filename);
    printf("Depending on how you compiled you might have to add 'Resources/' in front of filenames in HelloWorldScene.cpp\n");
}

bool HelloWorld::init()
{
	if (!Scene::init())
	{
		return false;
	}

	auto visibleSize = Director::getInstance()->getVisibleSize();
	Vec2 origin = Director::getInstance()->getVisibleOrigin();
	auto closeItem = MenuItemImage::create(
		"CloseNormal.png",
		"CloseSelected.png",
		CC_CALLBACK_1(HelloWorld::menuCloseCallback, this));

	if (closeItem == nullptr ||
		closeItem->getContentSize().width <= 0 ||
		closeItem->getContentSize().height <= 0)
	{
		problemLoading("'CloseNormal.png' and 'CloseSelected.png'");
	}
	else
	{
		float x = origin.x + visibleSize.width - closeItem->getContentSize().width / 2;
		float y = origin.y + closeItem->getContentSize().height / 2;
		closeItem->setPosition(Vec2(x, y));
	}
	auto menu = Menu::create(closeItem, NULL);
	menu->setPosition(Vec2::ZERO);
	this->addChild(menu, 1);
	auto label = Label::createWithTTF("WELCOME TO THE WORLD OF KING", "fonts/Marker Felt.ttf", 30);
	if (label == nullptr)
	{
		problemLoading("'fonts/Marker Felt.ttf'");
	}
	else
	{
		label->setPosition(Vec2(origin.x + visibleSize.width / 2,
			origin.y + visibleSize.height - label->getContentSize().height));

		this->addChild(label, 1);
	}
	auto action1 = MoveTo::create(2.0, Vec2(visibleSize.width / 2 + origin.x, visibleSize.height / 2 + origin.y));
	auto action2 = Hide::create();
	auto action = Sequence::create(action1, action2, NULL);
	label->runAction(action);
	auto sprite = Sprite::create("scene1.jpg");
	if (sprite == nullptr)
	{
		problemLoading("scene1.jpg");
	}
	else
	{
		sprite->setPosition(Vec2(visibleSize.width / 2 + origin.x, visibleSize.height / 2 + origin.y));
		this->addChild(sprite, 0);
	}
	CCSprite* spr = CCSprite::create();
	spr->setAnchorPoint(Point(0,0.5));

	spr->setPosition(Point(0, visibleSize.height / 2));
	addChild(spr);
	CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile("Animation/5_enemies.plist");
	CCAnimation* animation = CCAnimation::create();
	char nameBuf[100];
	for (int i = 0; i < 20; i++)
	{
		memset(nameBuf, 0, sizeof(nameBuf));
		sprintf(nameBuf, "5_enemies_1_attack_%03d.png", i);
		animation->addSpriteFrame(CCSpriteFrameCache::sharedSpriteFrameCache()->spriteFrameByName(nameBuf));
	}
	animation->setDelayPerUnit(0.05f);
	animation->setLoops(-1);
	CCAnimate* animate = CCAnimate::create(animation);
	spr->runAction(animate);
	auto action3 = MoveTo::create(20, Point(300, visibleSize.height/2));
	spr->runAction(action3);
	label->setVisible(false);
	spr->setScale(0.2f);
	return true;
}

void HelloWorld::menuCloseCallback(Ref* pSender)
{
    Director::getInstance()->end();
}
